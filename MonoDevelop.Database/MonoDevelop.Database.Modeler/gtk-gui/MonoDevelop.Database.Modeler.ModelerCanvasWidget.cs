// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace MonoDevelop.Database.Modeler {
    
    
    public partial class ModelerCanvasWidget {
        
        private Gtk.UIManager UIManager;
        
        private Gtk.Action AplicarAction;
        
        private Gtk.Action removeAction;
        
        private Gtk.Action convertAction;
        
        private Gtk.Action addAction;
        
        private Gtk.VBox mainVbox;
        
        private Gtk.Toolbar toolbar;
        
        private Gtk.ScrolledWindow mainScrolledWindow;
        
        protected virtual void Build() {
            Stetic.Gui.Initialize(this);
            // Widget MonoDevelop.Database.Modeler.ModelerCanvasWidget
            Stetic.BinContainer w1 = Stetic.BinContainer.Attach(this);
            this.UIManager = new Gtk.UIManager();
            Gtk.ActionGroup w2 = new Gtk.ActionGroup("Default");
            this.AplicarAction = new Gtk.Action("AplicarAction", Mono.Unix.Catalog.GetString("_Aplicar"), null, "gtk-apply");
            this.AplicarAction.ShortLabel = Mono.Unix.Catalog.GetString("_Aplicar");
            w2.Add(this.AplicarAction, null);
            this.removeAction = new Gtk.Action("removeAction", null, null, "gtk-remove");
            w2.Add(this.removeAction, null);
            this.convertAction = new Gtk.Action("convertAction", null, null, "gtk-convert");
            w2.Add(this.convertAction, null);
            this.addAction = new Gtk.Action("addAction", null, null, "gtk-add");
            w2.Add(this.addAction, null);
            this.UIManager.InsertActionGroup(w2, 0);
            this.Name = "MonoDevelop.Database.Modeler.ModelerCanvasWidget";
            // Container child MonoDevelop.Database.Modeler.ModelerCanvasWidget.Gtk.Container+ContainerChild
            this.mainVbox = new Gtk.VBox();
            this.mainVbox.Name = "mainVbox";
            this.mainVbox.Spacing = 6;
            // Container child mainVbox.Gtk.Box+BoxChild
            this.UIManager.AddUiFromString("<ui><toolbar name='toolbar'><toolitem name='AplicarAction' action='AplicarAction'/><toolitem name='removeAction' action='removeAction'/><toolitem name='convertAction' action='convertAction'/><toolitem name='addAction' action='addAction'/></toolbar></ui>");
            this.toolbar = ((Gtk.Toolbar)(this.UIManager.GetWidget("/toolbar")));
            this.toolbar.Name = "toolbar";
            this.toolbar.ShowArrow = false;
            this.toolbar.ToolbarStyle = ((Gtk.ToolbarStyle)(0));
            this.toolbar.IconSize = ((Gtk.IconSize)(3));
            this.mainVbox.Add(this.toolbar);
            Gtk.Box.BoxChild w3 = ((Gtk.Box.BoxChild)(this.mainVbox[this.toolbar]));
            w3.Position = 0;
            w3.Expand = false;
            w3.Fill = false;
            // Container child mainVbox.Gtk.Box+BoxChild
            this.mainScrolledWindow = new Gtk.ScrolledWindow();
            this.mainScrolledWindow.CanFocus = true;
            this.mainScrolledWindow.Name = "mainScrolledWindow";
            this.mainScrolledWindow.ShadowType = ((Gtk.ShadowType)(1));
            this.mainVbox.Add(this.mainScrolledWindow);
            Gtk.Box.BoxChild w4 = ((Gtk.Box.BoxChild)(this.mainVbox[this.mainScrolledWindow]));
            w4.Position = 1;
            this.Add(this.mainVbox);
            if ((this.Child != null)) {
                this.Child.ShowAll();
            }
            w1.SetUiManager(UIManager);
            this.Hide();
            this.AplicarAction.Activated += new System.EventHandler(this.OnAplicarActionActivated);
            this.removeAction.Activated += new System.EventHandler(this.OnCloseActionActivated);
            this.convertAction.Activated += new System.EventHandler(this.OnConvertActionActivated);
            this.addAction.Activated += new System.EventHandler(this.OnAddActionActivated);
        }
    }
}
